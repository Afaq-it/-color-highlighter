package com.mallowigi.ui;

import com.intellij.openapi.project.Project;
import com.intellij.openapi.util.InvalidDataException;
import com.intellij.openapi.util.WriteExternalException;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.mallowigi.search.ColorSearchEngine;
import com.mallowigi.search.SearchResults;
import com.mallowigi.ui.colorchooser.HSLColorChooserPanel;
import com.mallowigi.ui.colorchooser.HexColorChooserPanel;
import com.mallowigi.ui.colorchooser.JavaColorChooserPanel;
import com.mallowigi.ui.colorchooser.SVGColorChooserPanel;
import com.mallowigi.utils.EditorSelection;
import com.mallowigi.utils.EditorUtil;
import org.jdom.Element;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.util.Collection;
import java.util.Map;
import java.util.Random;

public class ColorBrowserToolWindow extends JPanel {

  private static final long serialVersionUID = 5990892904455904106L;
  private final Project project;
  private JPanel pnlMain;
  private JPanel pnlDetail;
  private JPanel pnlChooser;
  private DetailPanel detailPanel;
  private JColorChooser chooser;
  private Color lastColor;

  {
    // GUI initializer generated by IntelliJ IDEA GUI Designer
    // >>> IMPORTANT!! <<<
    // DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  public ColorBrowserToolWindow(final Project project) {
    this.project = project;

    setupControls();
  }

  public void initComponent() {
    if (lastColor == null) {
      final int code = new Random(System.currentTimeMillis()).nextInt(0xffffff);
      lastColor = new Color(code, false);
    }

    detailPanel.initComponent();
    setColor(lastColor);
  }

  public void readExternal(final Element element) throws InvalidDataException {
    detailPanel.readExternal(element);

    final Element elem = element.getChild("lastColor");
    if (elem != null) {
      final String lc = elem.getValue();
      if (lc != null && lc.length() > 0) {
        final int col = Integer.parseInt(lc);
        lastColor = new Color(col);
      }
    }
  }

  public void writeExternal(final Element element) throws WriteExternalException {
    detailPanel.writeExternal(element);

    if (lastColor != null) {
      final Element lc = new Element("lastColor");
      lc.addContent(Integer.toString(lastColor.getRGB()));
      element.addContent(lc);
    }
  }

  void showAtCursor() {
    selectColor();
  }

  void resetColor() {
    setColor(lastColor);
  }

  private void setColor(final Color color) {
    if (color != null) {
      chooser.setColor(color);
      detailPanel.setColor(color);
    } else {
      detailPanel.disable();
    }

    lastColor = color;
  }

  private void selectColor() {
    final EditorSelection sel = EditorUtil.getCursorSelection(project);

    if (sel != null) {
      final SearchResults results = ColorSearchEngine.findColor(sel);
      final Map<Integer, Color> colors = results.getColors();
      if (!colors.isEmpty()) {
        final Collection<Color> coll = colors.values();
        for (final Color color : coll) {
          setColor(color);
        }
      } else {
        setColor(null);
      }
    }
  }

  private void setupControls() {
    setLayout(new BorderLayout());
    add(BorderLayout.CENTER, pnlMain);

    pnlDetail.setLayout(new BorderLayout());

    detailPanel = new DetailPanel(project, this);
    pnlDetail.add(BorderLayout.CENTER, detailPanel.getMainComponent());
    detailPanel.disable();

    pnlChooser.setLayout(new BorderLayout());

    chooser = new JColorChooser();
    setupChooser();

    pnlChooser.add(BorderLayout.CENTER, chooser);
  }

  private void setupChooser() {
    chooser.addChooserPanel(new HSLColorChooserPanel());
    chooser.addChooserPanel(new HexColorChooserPanel());
    chooser.addChooserPanel(new SVGColorChooserPanel());
    chooser.addChooserPanel(new JavaColorChooserPanel());

    chooser.getSelectionModel().addChangeListener(new ChangeListener() {
      @Override
      public void stateChanged(final ChangeEvent changeEvent) {
        detailPanel.setColor(chooser.getColor());
        lastColor = chooser.getColor();
      }
    });
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR call it in your
   * code!
   */
  private void $$$setupUI$$$() {
    pnlMain = new JPanel();
    pnlMain.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
    pnlDetail = new JPanel();
    pnlMain.add(pnlDetail, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
      GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
      GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null));
    pnlChooser = new JPanel();
    pnlMain.add(pnlChooser, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
      GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
      GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null));
    final JPanel panel1 = new JPanel();
    pnlMain.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
      GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
      GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null));
  }
}
